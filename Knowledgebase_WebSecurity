response.write(fileData); to write a file (maybe html)?

response.writeHead(200, { 'Content-Type': 'text/plain',
                          'Trailer': 'Content-MD5' });
                          
          serve static content                https://nodejs.org/en/knowledge/HTTP/servers/how-to-serve-static-files/ 
          
          


Aufgabe 1:
-Exercise 1: Hello World  DONE	
-Serving content fast DONE
-Exercise 2: a static web server	soweit done
-Exercise 3: experimenting with request methods DONE 
-Exercise 4: content generation DONE
-DOS

Aufgabe 2:
-single page application mit überschrift @home, 3 Spalten der Räume mit gradzahl daneben in grau, jew. darunter button für versch. lichter mit versch. farben, based on state
-load information from server about lights etc. regularly
-copy html and js from example
-mockup data model? javascript für devices und temperatur
-routing and applicationpaths
	-wie mache ich routingtabellen
	-main page wird aus template generiert und nimmt die aktuellen werte. path /
	- AJAX GET requests to /:room/lights/:light oder /:room/temperature
		-response json encoded sensor state
	-for switch client sends AJAX POST requests to /:room/lights/:light e.g.
	-wie mache ich ne routing table?
	-alle routen eintragen
	-bei get nen json mit model zurücksenden
	-bei post anpassen des data models und zurücksenden des neuen status
	-routing table über switch case weiterhin (evtl. nested)
	-datamodel als variable oder javascript objekt
	-route parameters named? params property von request object?, named url segments?
-the client
	-evtl. mit jquery statt xmlhttprequest nutzen nachdem fertig
	-function die identifier der button empfängt und dann anhand von tabellen entscheidet welche get bzw. post anfragen sendet(nach post wir trotzem update zurückge			sendet
	-

	morgen css, js übertragen und mit implementierung beginnen
	

todo:


-mayber ajax (https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX)




known problems:


mögliche problems:
-url.parse nehmen um sicherheitslücke zu haben (siehe exercise 4)

links:
-https://melvingeorge.me/blog/check-if-path-is-directory-nodejs : path is a directory?
-https://nodejs.dev/learn/nodejs-file-paths could be nice for checking out the file endings
-https://stackoverflow.com/questions/52908212/how-to-serve-static-files-in-vanilla-nodejs/52913289
-https://www.w3schools.com/js/js_string_methods.asp
-html table https://www.w3schools.com/html/html_tables.asp
-replace string https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace
-string in list? https://stackoverflow.com/questions/2430000/determine-if-string-is-in-list-in-javascript
-file extension https://attacomsian.com/blog/nodejs-get-file-extension
-null check https://stackoverflow.com/questions/2422946/javascript-check-for-not-null/34817844
-grep suchen https://praxistipps.chip.de/unter-linux-nach-text-in-dateien-suchen-so-gehts_28711
-switch case https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/switch
-xss video https://www.youtube.com/watch?v=dFci82qwXA0
-xss overview https://owasp.org/www-community/attacks/xss/
-types of xss https://owasp.org/www-community/Types_of_Cross-Site_Scripting
-cross site scripting prevention https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#xss-prevention-rules
-testing for xss https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html
-dom based xss prevention sheet https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html
-denial of service https://owasp.org/www-community/attacks/Denial_of_Service
-query string nodejs https://stackoverflow.com/questions/6912584/how-to-get-get-query-string-variables-in-express-js-on-node-js?rq=1
-Object keys: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
-strings in js https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Strings
-bootstrap badges https://getbootstrap.com/docs/4.1/components/badge/
-ajax beispiel : https://developer.mozilla.org/en-US/docs/Web/Guide/AJAX/Getting_Started
-url parts https://css-tricks.com/snippets/javascript/get-url-and-url-parts-in-javascript/


morgen:
-auf /information ohne query zugreifen
-at first i tried randomized a lot of long password or parameters



DOS attack
i read about dos attacks and thought of the different possiblities my code could be attackable.
-i might not thougt of every case to check for file existence or allowed filetypes. especially with the newly added routing function
-if i take a very long pathname or send a lot of parameters i could maybe also slow down the server if long enough
-test if i specify more than just /information as path if it is possible to generate weird behaviour
-my route function splits the path. maybe if the path is long enough it can slow down the server
-i make an array for all query parameter which could be too big
- i show all query parameter in the website which could be problematic if too big
-the website waites for body data. what happens if the body data is to big
- count keys of object https://stackoverflow.com/questions/126100/how-to-efficiently-count-the-number-of-keys-properties-of-an-object-in-javascrip


first attacks:
-i found out through my locks that i didnt thought of the ending .ico and its not loaded because of that
-i generated random pairs of parameters and send them to localhost:8000/information?ab=ac etc. Started with 10 pairs and multiplied everytime times 10. Til about 10000. There i found out that the browser seems to cut the parameters at some point. I managed to send about 567 parameter pairs. but it doesnt crash the server.
-next i tried to pass very long paths.this also results in no crash because for example in the /information path i dont care for the other paths. the only thing what happened was, that css etc. were not loaded because the path doesnt exist. the path was also cutted by the browser at some point
-the next i tried is to send very long passwords via the post exercise 3. I saw, that that if i put in the path "Public" it seeks for the index.html it works but after sending it to the server it is send to "/index.html" which doesnt exist without the "/Public" before. I fixed it by checking if the file is a css,js or html and add an "/Public" in the path if there is none.i tried passwords up to 6000000 length and the server worked. only copy pasting was very slow at longer passwords.
-through luck i found out that if i search for "localhost:8000/information" without the parameter the server crashes, becauce the the query object is null and i try to run a function on it. i fixed it by running a null check before.
-i could also crash the server with "localhost:8000//" because that is an invalid url. I fixed it by catching the errors and return 404 answers.


XSS Attack
-I inserted the script "<script>alert('Owned');</script>" as a get parameter in "localhost:8000/inormation?search=nothing <script>alert('Owned');</script>" and the alert appeared.
- i checked rule 0 and the only place im inserting the "untrusted" data is inside <td> elements. For rule 1 and 2 i made an specific function to encode data for the possiblities to do my own modifications in the future if neccessary. I encode explicitly all keys and values of the get parameter.








other stuff:
-acces other stuff über path


